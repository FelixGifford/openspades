/*
 Copyright (c) 2021 yvt

 This file is part of OpenSpades.

 OpenSpades is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 OpenSpades is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with OpenSpades.  If not, see <http://www.gnu.org/licenses/>.

 */

uniform sampler2D intermediateTexture;
uniform sampler2D resampledTexture;
uniform sampler2D originalTexture;
uniform vec2 inverseOriginalSize;

varying vec2 texCoord;

vec3 encodePalYuv(vec3 rgb) {
	return vec3(dot(rgb, vec3(0.299, 0.587, 0.114)), dot(rgb, vec3(-0.14713, -0.28886, 0.436)),
	            dot(rgb, vec3(0.615, -0.51499, -0.10001)));
}

vec3 decodePalYuv(vec3 yuv) {
	return vec3(dot(yuv, vec3(1., 0., 1.13983)), dot(yuv, vec3(1., -0.39465, -0.58060)),
	            dot(yuv, vec3(1., 2.03211, 0.)));
}

void main() {
	// generated by ./1dgaussGen.rb
	// pixelShift is texture coord shift / texture pixel
	float pixelShift = inverseOriginalSize.y;
	float shift1 = pixelShift * -2.30654399138844;
	const float scale1 = 0.178704407070903;
	float shift2 = pixelShift * -0.629455560633963;
	const float scale2 = 0.321295592929097;
	float shift3 = pixelShift * 0.629455560633963;
	const float scale3 = 0.321295592929097;
	float shift4 = pixelShift * 2.30654399138844;
	const float scale4 = 0.178704407070903;

	vec4 blurred = texture2D(intermediateTexture, texCoord + vec2(0.0, shift1)) * scale1;
	blurred += texture2D(intermediateTexture, texCoord + vec2(0.0, shift2)) * scale2;
	blurred += texture2D(intermediateTexture, texCoord + vec2(0.0, shift3)) * scale3;
	blurred += texture2D(intermediateTexture, texCoord + vec2(0.0, shift4)) * scale4;

	vec3 resampled = texture2D(resampledTexture, texCoord).xyz;

	vec3 sharpened = resampled + (resampled - blurred.xyz) * 4.0;

	vec2 off = inverseOriginalSize;
	vec3 in0 = texture2D(originalTexture, texCoord).xyz;
	vec3 in1 = texture2D(originalTexture, texCoord + vec2(+off.x, 0.0)).xyz;
	vec3 in2 = texture2D(originalTexture, texCoord + vec2(-off.x, 0.0)).xyz;
	vec3 in3 = texture2D(originalTexture, texCoord + vec2(0.0, +off.y)).xyz;
	vec3 in4 = texture2D(originalTexture, texCoord + vec2(0.0, -off.y)).xyz;
	vec3 in5 = texture2D(originalTexture, texCoord + vec2(+off.x, +off.y)).xyz;
	vec3 in6 = texture2D(originalTexture, texCoord + vec2(-off.x, +off.y)).xyz;
	vec3 in7 = texture2D(originalTexture, texCoord + vec2(+off.x, -off.y)).xyz;
	vec3 in8 = texture2D(originalTexture, texCoord + vec2(-off.x, -off.y)).xyz;

	sharpened = encodePalYuv(sharpened);
	in0 = encodePalYuv(in0);
	in1 = encodePalYuv(in1);
	in2 = encodePalYuv(in2);
	in3 = encodePalYuv(in3);
	in4 = encodePalYuv(in4);
	in5 = encodePalYuv(in5);
	in6 = encodePalYuv(in6);
	in7 = encodePalYuv(in7);
	in8 = encodePalYuv(in8);

	vec3 minColor = min(min(min(in0, in1), min(in2, in3)), in4);
	vec3 maxColor = max(max(max(in0, in1), max(in2, in3)), in4);
	minColor = mix(minColor, min(min(min(in5, in6), min(in7, in8)), minColor), 0.5);
	maxColor = mix(maxColor, max(max(max(in5, in6), max(in7, in8)), maxColor), 0.5);

	vec3 t0 = (sharpened - minColor) / (maxColor - minColor);
	t0 = clamp(t0, 0.0, 1.0);

	vec3 t1 = t0 * t0;
	vec3 t2 = t1 * t0;
	vec3 t3 = t1 * t1;
	vec3 t4 = t2 * t1;
	vec3 t5 = t2 * t2;
	vec3 t6 = t3 * t2;

	t0 = clamp(t0 * -13.29 + t1 * -4.96 + t2 * 21.68 + t3 * 4.02 + t4 * 12.54 + t5 * 21.34 +
	             t6 * 23.640,
	           0.0, 1.0);

	vec3 t7 = t0 * t0;
	vec3 t8 = t7 * t0;
	vec3 t9 = t7 * t7;
	vec3 t10 = t8 * t7;
	vec3 t11 = t8 * t8;
	vec3 t12 = t9 * t8;

	t0 = clamp(t0 * -12.08 + t7 * -4.96 + t8 * 17.55 + t9 * 5.38 + t10 * 12.39 + t11 * 19.79 +
	             t12 * 12.36,
	           0.0, 1.0);

	gl_FragColor.xyz = decodePalYuv(t0 * (maxColor - minColor) + minColor);
	gl_FragColor.w = 1.0;
}
